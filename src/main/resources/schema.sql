drop table IF EXISTS PUBLIC.film_genre CASCADE;
create TABLE IF NOT EXISTS PUBLIC.film_genre (
	GENRE_ID INTEGER NOT NULL,
	GENRE_NAME VARCHAR_IGNORECASE NOT NULL,
	CONSTRAINT FILM_GENRE_PK PRIMARY KEY (GENRE_ID)
);

drop table IF EXISTS PUBLIC.film_by_genres CASCADE;
create TABLE IF NOT EXISTS PUBLIC.film_by_genres (
	FILM_ID INTEGER NOT NULL,
	GENRE_ID INTEGER NOT NULL
);

drop table IF EXISTS PUBLIC.film_rating CASCADE;
create TABLE IF NOT EXISTS PUBLIC.film_rating (
	RATING_ID INTEGER NOT NULL,
	RATING_NAME CHARACTER VARYING NOT NULL,
	CONSTRAINT FILM_RATING_PK PRIMARY KEY (RATING_ID)
);

drop table IF EXISTS PUBLIC.films CASCADE;
create TABLE IF NOT EXISTS PUBLIC.films (
	FILM_ID INTEGER NOT NULL AUTO_INCREMENT,
	FILM_NAME VARCHAR_IGNORECASE NOT NULL,
	DESCRIPTION VARCHAR_IGNORECASE,
	RELEASE_DATE DATE,
	DURATION INTEGER NOT NULL,
	--LIKES_ID INTEGER,
	--COUNT_LIKES INTEGER,
	GENRE_ID INTEGER,
	RATING_ID INTEGER NOT NULL,
	--CONSTRAINT FILMS_FK PRIMARY KEY (GENRE_ID,GENRE_ID),
	--CONSTRAINT FILMS_FK_1 PRIMARY KEY (RATING_ID,RATING_ID),
	CONSTRAINT FILMS_PK PRIMARY KEY (FILM_ID)
	--CONSTRAINT FILMS_FK FOREIGN KEY (GENRE_ID) REFERENCES PUBLIC.FILM_GENRE(GENRE_ID) ON DELETE RESTRICT ON UPDATE RESTRICT,
	--CONSTRAINT FILMS_FK_1 FOREIGN KEY (RATING_ID) REFERENCES PUBLIC.FILM_RATING(RATING_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
);

drop table IF EXISTS PUBLIC.friends CASCADE;
create TABLE IF NOT EXISTS PUBLIC.friends (
	USER_ID INTEGER NOT NULL,
	FRIEND_ID INTEGER NOT NULL
);

drop table IF EXISTS PUBLIC.users CASCADE;
create TABLE IF NOT EXISTS PUBLIC.users (
	USER_ID INTEGER NOT NULL AUTO_INCREMENT,
	USER_EMAIL VARCHAR_IGNORECASE NOT NULL,
	USER_LOGIN VARCHAR_IGNORECASE NOT NULL,
	USER_NAME VARCHAR_IGNORECASE,
	USER_BIRTHDAY DATE,
	CONSTRAINT USERS_PK PRIMARY KEY (USER_ID)
);

drop table IF EXISTS PUBLIC.film_likes CASCADE;
create TABLE IF NOT EXISTS PUBLIC.film_likes (
	FILM_ID INTEGER NOT NULL,
	USER_ID INTEGER NOT NULL
);
DROP TABLE IF EXISTS PUBLIC.REVIEWS CASCADE;
CREATE TABLE IF NOT EXISTS PUBLIC.REVIEWS (
  REVIEW_ID INTEGER PRIMARY KEY AUTO_INCREMENT,
  CONTENT VARCHAR NOT NULL,
  IS_POSITIVE BOOLEAN NOT NULL,
  USER_ID INTEGER NOT NULL,
  FILM_ID INTEGER NOT NULL,
--  USERS_ID_LIKE ARRAY,
  --USERS_ID_DISLIKE ARRAY
   FOREIGN KEY (film_id) REFERENCES films (film_id),
    FOREIGN KEY (user_id) REFERENCES users (user_id),
    UNIQUE (film_id, user_id)
);